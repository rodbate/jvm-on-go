package instructions

import (
	"fmt"
	"jvm-on-go/instructions/base"
	"jvm-on-go/instructions/comparison"
	"jvm-on-go/instructions/constant"
	"jvm-on-go/instructions/control"
	"jvm-on-go/instructions/conversion"
	"jvm-on-go/instructions/extended"
	"jvm-on-go/instructions/load"
	"jvm-on-go/instructions/math"
	"jvm-on-go/instructions/opcodes"
	"jvm-on-go/instructions/reference"
	"jvm-on-go/instructions/reserved"
	"jvm-on-go/instructions/stack"
	"jvm-on-go/instructions/store"
)

var instructions = map[uint8]base.Instruction{
	opcodes.AConstNull:      constant.AConstNull,
	opcodes.IConstM1:        constant.IConstM1,
	opcodes.IConst0:         constant.IConst0,
	opcodes.IConst1:         constant.IConst1,
	opcodes.IConst2:         constant.IConst2,
	opcodes.IConst3:         constant.IConst3,
	opcodes.IConst4:         constant.IConst4,
	opcodes.IConst5:         constant.IConst5,
	opcodes.LConst0:         constant.LConst0,
	opcodes.LConst1:         constant.LConst1,
	opcodes.FConst0:         constant.FConst0,
	opcodes.FConst1:         constant.FConst1,
	opcodes.FConst2:         constant.FConst2,
	opcodes.DConst0:         constant.DConst0,
	opcodes.DConst1:         constant.DConst1,
	opcodes.BIPush:          constant.BIPush,
	opcodes.SIPush:          constant.SIPush,
	opcodes.LDC:             constant.Ldc,
	opcodes.LDCW:            constant.LdcW,
	opcodes.LDC2W:           constant.Ldc2W,
	opcodes.ILoad:           load.ILoad,
	opcodes.LLoad:           load.LLoad,
	opcodes.FLoad:           load.FLoad,
	opcodes.DLoad:           load.DLoad,
	opcodes.ALoad:           load.ALoad,
	opcodes.ILoad0:          load.ILoad0,
	opcodes.ILoad1:          load.ILoad1,
	opcodes.ILoad2:          load.ILoad2,
	opcodes.ILoad3:          load.ILoad3,
	opcodes.LLoad0:          load.LLoad0,
	opcodes.LLoad1:          load.LLoad1,
	opcodes.LLoad2:          load.LLoad2,
	opcodes.LLoad3:          load.LLoad3,
	opcodes.FLoad0:          load.FLoad0,
	opcodes.FLoad1:          load.FLoad1,
	opcodes.FLoad2:          load.FLoad2,
	opcodes.FLoad3:          load.FLoad3,
	opcodes.DLoad0:          load.DLoad0,
	opcodes.DLoad1:          load.DLoad1,
	opcodes.DLoad2:          load.DLoad2,
	opcodes.DLoad3:          load.DLoad3,
	opcodes.ALoad0:          load.ALoad0,
	opcodes.ALoad1:          load.ALoad1,
	opcodes.ALoad2:          load.ALoad2,
	opcodes.ALoad3:          load.ALoad3,
	opcodes.IALoad:          reference.IALoad,
	opcodes.LALoad:          reference.LALoad,
	opcodes.FALoad:          reference.FALoad,
	opcodes.DALoad:          reference.DALoad,
	opcodes.AALoad:          reference.AALoad,
	opcodes.BALoad:          reference.BALoad,
	opcodes.CALoad:          reference.CALoad,
	opcodes.SALoad:          reference.SALoad,
	opcodes.IStore:          store.IStore,
	opcodes.LStore:          store.LStore,
	opcodes.FStore:          store.FStore,
	opcodes.DStore:          store.DStore,
	opcodes.AStore:          store.AStore,
	opcodes.IStore0:         store.IStore0,
	opcodes.IStore1:         store.IStore1,
	opcodes.IStore2:         store.IStore2,
	opcodes.IStore3:         store.IStore3,
	opcodes.LStore0:         store.LStore0,
	opcodes.LStore1:         store.LStore1,
	opcodes.LStore2:         store.LStore2,
	opcodes.LStore3:         store.LStore3,
	opcodes.FStore0:         store.FStore0,
	opcodes.FStore1:         store.FStore1,
	opcodes.FStore2:         store.FStore2,
	opcodes.FStore3:         store.FStore3,
	opcodes.DStore0:         store.DStore0,
	opcodes.DStore1:         store.DStore1,
	opcodes.DStore2:         store.DStore2,
	opcodes.DStore3:         store.DStore3,
	opcodes.AStore0:         store.AStore0,
	opcodes.AStore1:         store.AStore1,
	opcodes.AStore2:         store.AStore2,
	opcodes.AStore3:         store.AStore3,
	opcodes.IAStore:         reference.IAStore,
	opcodes.LAStore:         reference.LAStore,
	opcodes.FAStore:         reference.FAStore,
	opcodes.DAStore:         reference.DAStore,
	opcodes.AAStore:         reference.AAStore,
	opcodes.BAStore:         reference.BAStore,
	opcodes.CAStore:         reference.CAStore,
	opcodes.SAStore:         reference.SAStore,
	opcodes.POP:             stack.Pop,
	opcodes.POP2:            stack.Pop2,
	opcodes.DUP:             stack.Dup,
	opcodes.DUPX1:           stack.DupX1,
	opcodes.DUPX2:           nil,
	opcodes.DUP2:            stack.Dup2,
	opcodes.DUP2X1:          stack.Dup2X1,
	opcodes.SWAP:            stack.Swap,
	opcodes.IAdd:            math.IAdd,
	opcodes.LAdd:            math.LAdd,
	opcodes.FAdd:            math.FAdd,
	opcodes.DAdd:            math.DAdd,
	opcodes.ISub:            math.ISub,
	opcodes.LSub:            math.LSub,
	opcodes.FSub:            math.FSub,
	opcodes.DSub:            math.DSub,
	opcodes.IMul:            math.IMul,
	opcodes.LMul:            math.LMul,
	opcodes.FMul:            math.FMul,
	opcodes.DMul:            math.DMul,
	opcodes.IDiv:            math.IDiv,
	opcodes.LDiv:            math.LDiv,
	opcodes.FDiv:            math.FDiv,
	opcodes.DDiv:            math.DDiv,
	opcodes.IRem:            math.IRem,
	opcodes.LRem:            math.LRem,
	opcodes.FRem:            math.FRem,
	opcodes.DRem:            math.DRem,
	opcodes.INeg:            math.INeg,
	opcodes.LNeg:            math.LNeg,
	opcodes.FNeg:            math.FNeg,
	opcodes.DNeg:            math.DNeg,
	opcodes.IShl:            math.IShl,
	opcodes.LShl:            math.LShl,
	opcodes.IShr:            math.IShr,
	opcodes.LShr:            math.LShr,
	opcodes.IUShr:           math.IUShr,
	opcodes.LUShr:           math.LUShr,
	opcodes.IAnd:            math.IAnd,
	opcodes.LAnd:            math.LAnd,
	opcodes.IOr:             math.IOr,
	opcodes.LOr:             math.LOr,
	opcodes.IXor:            math.IXor,
	opcodes.LXor:            math.LXor,
	opcodes.IInc:            math.IInc,
	opcodes.I2L:             conversion.I2L,
	opcodes.I2F:             conversion.I2F,
	opcodes.I2D:             conversion.I2D,
	opcodes.L2I:             conversion.L2I,
	opcodes.L2F:             conversion.L2F,
	opcodes.L2D:             conversion.L2D,
	opcodes.F2I:             conversion.F2I,
	opcodes.F2D:             conversion.F2D,
	opcodes.F2L:             conversion.F2L,
	opcodes.D2I:             conversion.D2I,
	opcodes.D2F:             conversion.D2F,
	opcodes.D2L:             conversion.D2L,
	opcodes.I2B:             conversion.I2B,
	opcodes.I2C:             conversion.I2C,
	opcodes.I2S:             conversion.I2S,
	opcodes.LCmp:            comparison.LCmp,
	opcodes.FCmpl:           comparison.FCmpl,
	opcodes.FCmpg:           comparison.FCmpg,
	opcodes.DCmpl:           comparison.DCmpl,
	opcodes.DCmpg:           comparison.DCmpg,
	opcodes.IFeq:            comparison.IFeq,
	opcodes.IFne:            comparison.IFne,
	opcodes.IFlt:            comparison.IFlt,
	opcodes.IFge:            comparison.IFge,
	opcodes.IFgt:            comparison.IFgt,
	opcodes.IfICmpEq:        comparison.IFICmpEq,
	opcodes.IfICmpNe:        comparison.IFICmpNe,
	opcodes.IfICmpLt:        comparison.IFICmpLt,
	opcodes.IfICmpGe:        comparison.IFICmpGe,
	opcodes.IfICmpGt:        comparison.IFICmpGt,
	opcodes.IfICmpLe:        comparison.IFICmpLe,
	opcodes.IfACmpEq:        comparison.IFACmpEq,
	opcodes.IfACmpNe:        comparison.IFACmpNe,
	opcodes.IFle:            comparison.IFle,
	opcodes.NOP:             constant.Nop,
	opcodes.Goto:            control.Goto,
	opcodes.LookupSwitch:    control.LookupSwitch,
	opcodes.Return:          control.Return,
	opcodes.AReturn:         control.AReturn,
	opcodes.IReturn:         control.IReturn,
	opcodes.FReturn:         control.FReturn,
	opcodes.LReturn:         control.LReturn,
	opcodes.DReturn:         control.DReturn,
	opcodes.TableSwitch:     control.TableSwitch,
	opcodes.GetStatic:       reference.GetStatic,
	opcodes.PutStatic:       reference.PutStatic,
	opcodes.GetField:        reference.GetField,
	opcodes.PutField:        reference.PutField,
	opcodes.InvokeVirtual:   reference.InvokeVirtual,
	opcodes.InvokeSpecial:   reference.InvokeSpecial,
	opcodes.InvokeStatic:    reference.InvokeStatic,
	opcodes.InvokeInterface: reference.InvokeInterface,
	opcodes.InvokeDynamic:   reference.InvokeDynamic,
	opcodes.New:             reference.New,
	opcodes.NewArray:        reference.NewArray,
	opcodes.ANewArray:       reference.ANewArray,
	opcodes.ArrayLength:     reference.ArrayLength,
	opcodes.AThrow:          reference.AThrow,
	opcodes.CheckCast:       reference.CheckCast,
	opcodes.Instanceof:      reference.InstanceOf,
	opcodes.MonitorEnter:    reference.MonitorEnter,
	opcodes.MonitorExit:     reference.MonitorExit,
	opcodes.Wide:            extended.Wide,
	opcodes.MultiANewArray:  reference.MultiANewArray,
	opcodes.IfNull:          extended.IfNull,
	opcodes.IfNonnull:       extended.IfNotNull,
	opcodes.GotoW:           extended.GotoW,
	opcodes.InvokeNative:    reserved.InvokeNative,
}

func NewInstruction(opCode uint8) base.Instruction {
	inst, ok := instructions[opCode]
	if ok {
		return inst
	}
	panic(fmt.Sprintf("not supported op code: %v\n", opCode))
}
